// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}


model User {
  id                      String    @id @default(uuid())
  clerkUserId             String    @unique
  email                   String    @unique
  Fname                   String    
  Lname                   String    
  username                String    @unique 
  imageUrl                String?
  role                    UserRole  @default(USER)
  transactions            Transaction[]
  accounts                Account[]
  tasks                   Task[]
  actLog                  ActivityLog[]
  archived                Archive[]
  

  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt


  Cashflow                cashFlow[]

  @@map("users") // how the 'model User{}' table is called to other models
}



model Account {
  id                      String  @id @default(uuid())
  name                    String  @unique
  type                    AccountType
  isIndividual            Boolean @default(false)
  userId                  String    
  createdAt               DateTime    @default(now())
  updatedAt               DateTime    @updatedAt
  
  street                  String
  buildingNumber          String
  town                    String
  city                    String
  zip                     String 
  province                String
  region                  String
  
  businessLine            String
  tin                     Int[]
  RDO                     String
  birthDate               DateTime    
  contactNumber           String @db.VarChar(11)
  email                   String   
  
  isHeadOffice            Boolean   @default(false)
  branchCount             Int?
  owner                   String
  
  user                    User  @relation(fields: [userId], references: [id])
  transactions            Transaction[]
  Cashflow                cashFlow[]
  archived                Archive[]

  @@index([userId])
  @@map("accounts")

  SubAccount SubAccount[]
}



enum AccountType {
  INCORPORATION //NON INDIV
  PARTNERSHIP // NON INDIV this is non individual base on BIR form No.1903
  COOPERATIVE //NON INDIV
  ASSOCIATION //NON INDIV
  CORPORATION // NON INDIV
  
  FREELANCE // isINDIV
  PROFESSIONAL // isINDIV
  SOLEPROPRIETORSHIP // isINDIV

  OTHERS
}

model Transaction {
  id                    String       @id @default(uuid())
  type                  TransactionType
  amount                Decimal
  description           String?
  date                  DateTime
  category              String
  particular            String?
  receiptUrl            String?
  Activity              activityType
  printNumber           String   
  refNumber             String    @unique 

  
  isRecurring           Boolean      @default(false)
  recurringInterval     RecurringInterval? //only used if isRecurr is true
  nextRecurringDate     DateTime?   //Next date for recurring transaction
  
  lastProcessed         DateTime?   //last time this recurring transac was processed
  userId                String
  user                  User        @relation(fields: [userId], references: [id])
  accountId             String
  account               Account     @relation(fields: [accountId], references: [id])

  cashFlow              cashFlow[]   @relation("TransactionToCashflow") // Define the relationship
  subAccounts            SubAccountTransaction[] // Explicit many-to-many relationship


  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt


  @@index([userId])
  @@index([accountId])
  @@map("transactions")
  
}


enum TransactionType {
  INCOME
  EXPENSE
}

enum RecurringInterval {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

enum TaskStatus {
  COMPLETED
  PROGRESS
  PLANNING
  RESEARCH
}

enum activityType {
  OPERATION
  INVESTMENT
  FINANCING
}

enum UserRole {
  USER
  ADMIN
  STAFF
  SYSADMIN
}

enum UrgencyLevel {
  LOW
  MEDIUM
  HIGH
}



model cashFlow {
  id                      String      @id @unique @default(uuid())

  activityTotal           Float[]    // total per activity
  netChange               Float    //Sum of totals of Activities
  startBalance            Float    // beginning balance before the activities
  endBalance              Float    // ending balance, beginning balance + netChange
  description             String?
  date                    DateTime    // date period of the CFS
  transactions            Transaction[] @relation("TransactionToCashflow")
  subAccounts             CashflowSubAccount[] @relation("CashflowToSubAccount")
  periodCashFlow          CashFlowPeriod  @default(DAILY)

  userId                  String
  user                    User        @relation(fields: [userId], references: [id])
  accountId               String
  account                 Account     @relation(fields: [accountId], references: [id])           


  createdAt               DateTime    @default(now()) // timestamp for generation

  @@index([accountId])
  @@index([userId])
  @@index([id])
  @@map("Cashflow")
} 

enum CashFlowPeriod {
  DAILY
  WEEKLY
  MONTHLY
  SEMI_ANNUAL
  QUARTERLY
  ANNUAL
  FISCAL_YEAR
}



model SubAccount {
  id          String       @id @unique @default(uuid())
  name        String       // Name of the sub-account (e.g., "Company Dinner")
  description String?      // Optional description
  balance     Decimal?     // Balance specific to the sub-account
  accountId   String       // Foreign key to the parent account
  account     Account      @relation(fields: [accountId], references: [id])
  transactions SubAccountTransaction[] // Transactions specific to this sub-account
  parentOf     SubAccountRelation[] @relation("ParentAccount")
  childOf      SubAccountRelation[] @relation("ChildAccount")
  cashFlows    CashflowSubAccount[] @relation("SubAccountToCashflow") // Many-to-many relationship

  createdAt   DateTime     @default(now())
  updatedAt   DateTime?    @updatedAt

  @@index([accountId])
  @@map("sub_accounts")
   
}

model SubAccountRelation {
  id           String       @id @default(uuid())
  parent       SubAccount? @relation("ParentAccount", fields: [parentId], references: [id])
  parentId     String?    
  child        SubAccount @relation("ChildAccount", fields: [childId], references: [id])
  childId      String
  relationName String?  // This allows you to name the relationship

  createdAt    DateTime     @default(now()) // Timestamp for when the relation was created
  updatedAt    DateTime?    @updatedAt

  @@index([parentId])        // Index for efficient querying by parentId
  @@index([childId])  
  @@map("sub_account_relations")
}

model CashflowSubAccount {
  cashFlowId    String
  subAccountId  String
  cashFlow      cashFlow   @relation("CashflowToSubAccount", fields: [cashFlowId], references: [id])
  subAccount    SubAccount @relation("SubAccountToCashflow", fields: [subAccountId], references: [id])

  // Additional metadata fields
  createdAt     DateTime   @default(now())
  assignedBy    String?    // Optional: Tracks who assigned the sub-account to the cashflow

  @@id([cashFlowId, subAccountId]) // Composite primary key
  @@map("cashflow_sub_accounts")
}

model SubAccountTransaction {
  subAccountId  String  //subAccount.id
  transactionId String
  subAccount    SubAccount   @relation(fields: [subAccountId], references: [id])
  transaction   Transaction  @relation(fields: [transactionId], references: [id])

  createdAt     DateTime     @default(now())

  @@id([subAccountId, transactionId]) // Composite primary key
  @@map("sub_account_transactions")
}

model Task {
  id              String   @id @default(uuid())
  taskName        String
  taskDescription String?
 
  taskCategory    String
  urgency         UrgencyLevel  @default(MEDIUM)
  dueDate         DateTime

  userId          String
  assignedTo      User     @relation(fields: [userId], references: [id])

  createdAt   DateTime @default(now())
  updatedAt   DateTime? @updatedAt

  @@index([userId])
  @@map("tasks")
}


model ActivityLog {
  id        String   @id @default(uuid())
  userId    String
  action    String
  meta      Json?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Archive {
  id          String   @id @default(uuid())
  userId      String
  action      String           // e.g. "createSubAccount", "deleteTransaction"
  entityType  String           // e.g. "SubAccount", "Transaction"
  entityId    String           // The unique id of the affected entity
  data        Json             // The full snapshot of the entity at the time of action
  createdAt   DateTime @default(now())
  accountId   String?
  user        User     @relation(fields: [userId], references: [id])
  account     Account?  @relation(fields: [accountId], references: [id])

  @@index ([userId])
  @@index ([accountId])
  @@map("archives")
}
